variables:
  keystoreFilename: etendo.keystore
  keystoreSecureFileId: 7d2283fd-93c9-4e06-940c-afc282c1e105
  sonoma.tags: 'continuous,javascript,android,signed,android-app-bundle,distribution'
name: $(Rev:r)
resources:
  repositories:
    - repository: self
      type: git
      ref: refs/heads/$(Build.SourceBranch)
trigger:
  branches:
    include:
      - develop
      - main
jobs:
  - job: Phase_1
    displayName: Build
    cancelTimeoutInMinutes: 0
    pool:
      name: Azure Pipelines
      vmImage: macOS-13
    steps:
      - checkout: self
        clean: true
        submodules: recursive
        lfs: true
      - task: PowerShell@2
        displayName: Install build scripts
        continueOnError: true
        inputs:
          targetType: inline
          scriptName: ''
          script: >-
            Set-Location -Path '$(Agent.HomeDirectory)'

            Invoke-WebRequest -Uri
            'https://appcenterbuildassets.azureedge.net/buildscripts/appcenter-build-assets-latest.zip'
            -OutFile 'appcenter-build-assets-latest.zip'

            if (Test-Path ./scripts) { Remove-Item -Path ./scripts -Force
            -Recurse }

            New-Item -ItemType directory -Path 'scripts' | Out-Null

            unzip -q -d 'scripts' 'appcenter-build-assets-latest.zip'

            Invoke-Expression 'bash ./scripts/init.sh'
          failOnStderr: true
      - task: ShellScript@2
        displayName: Post Clone Script
        inputs:
          scriptPath: appcenter-post-clone.sh
      - task: Bash@3
        displayName: Select Node.js Version v2
        inputs:
          filePath: $(Agent.HomeDirectory)/scripts/select-node-version.sh
          arguments: node18
          failOnStderr: true
      - task: CmdLine@1
        displayName: yarn/npm install
        inputs:
          filename: sh
          arguments: >-
            -c "if [ -f yarn.lock ]; then { yarn install
            --network-timeout=600000; } else npm install; fi"
      - task: CmdLine@2
        displayName: Run Jetify
        inputs:
          script: |2-
                        if [ -f node_modules/jetifier/bin/jetify ]; then
                            node node_modules/jetifier/bin/jetify
                        else
                            echo "Warning: node_modules/jetifier/bin/jetify does not exist"
                            echo "         source code will not be upgraded to AndroidX"
                        fi
                        
          failOnStderr: true
      - task: ShellScript@2
        displayName: Tag build
        inputs:
          scriptPath: $(Agent.HomeDirectory)/scripts/emit-tags.sh
          args: $(sonoma.tags)
      - task: ShellScript@2
        displayName: Install Android keystore
        inputs:
          scriptPath: $(Agent.HomeDirectory)/scripts/install-keystore.sh
          args: $(keystoreEncoded)
      # Instalar Java 17
      - task: JavaToolInstaller@0
        displayName: Install Java 17
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      # Verificar JAVA_HOME
      - script: |
          echo "JAVA_HOME is set to $(JAVA_HOME)"
          java -version
        displayName: Verify Java Installation
        
      - task: PowerShell@2
        displayName: 'Set versionCode from Timestamp'
        inputs:
          targetType: 'inline'
          script: |
            $timestamp = Get-Date -Format "yyyyMMddHH"
            $versionCode = [int]$timestamp
            if ($versionCode -gt 2100000000) {
              Write-Error "versionCode ($versionCode) excede el límite de Google Play (2100000000)"
            }
            Write-Host "##vso[task.setvariable variable=versionCode]$versionCode"
      - task: Gradle@1
        displayName: Gradle Task
        inputs:
          wrapperScript: android/gradlew
          tasks: 'clean :app:assembleRelease :app:bundleRelease '
          options: >-
            -DAPPCENTER_KEYSTORE_PASSWORD="$(keystorePassword)"
            -DMOBILECENTER_KEYSTORE_PASSWORD="$(keystorePassword)"
            -DAPPCENTER_KEYSTORE_FILE_ID="$(keystoreFilename)"
            -DMOBILECENTER_KEYSTORE_FILE_ID="$(keystoreFilename)"
            -DAPPCENTER_KEY_ALIAS="$(keyAlias)"
            -DMOBILECENTER_KEY_ALIAS="$(keyAlias)"
            -DAPPCENTER_KEY_PASSWORD="$(keyPassword)"
            -DMOBILECENTER_KEY_PASSWORD="$(keyPassword)"
            -DAPPCENTER_BUILD_VERSION="$(versionCode)"
            -DMOBILECENTER_BUILD_VERSION="$(versionCode)" -p "android"
          jdkArchitecture: x64
          publishJUnitResults: false
          sqAnalysisBreakBuildIfQualityGateFailed: false
      - task: ShellScript@2
        name: appcenter_android_postprocess_output
        displayName: Android Postprocess
        inputs:
          scriptPath: $(Agent.HomeDirectory)/scripts/android-postprocess.sh
          args: $(build.sourcesdirectory)/android/app/build/outputs/apk
      - task: AndroidSigning@3
        displayName: Sign APK
        inputs:
          files: $(build.sourcesdirectory)/android/app/build/**/*.apk
          keystoreFile: $(keystoreSecureFileId)
          keystorePass: $(keystorePassword)
          keystoreAlias: $(keyAlias)
          keyPass: $(keyPassword)
          apksignerArguments: '-verbose'
      - task: DownloadSecureFile@1
        name: keystore
        inputs:
          secureFile: '7d2283fd-93c9-4e06-940c-afc282c1e105'
      - task: AndroidSigning@1
        displayName: Sign Android App Bundle
        inputs:
          files: $(build.sourcesdirectory)/android/app/build/**/*.aab
          keystoreFile: '$(keystore.secureFilePath)'
          keystorePass: $(keystorePassword)
          keystoreAlias: $(keyAlias)
          keyPass: $(keyPassword)
          jarsignerArguments: '-verbose -sigalg SHA256withRSA -digestalg SHA-256'
      - task: CopyFiles@2
        displayName: Copy build files to staging
        inputs:
          SourceFolder: $(build.sourcesdirectory)/android/app/build/outputs
          Contents: apk/**/*.apk
          TargetFolder: $(build.artifactstagingdirectory)/build
          OverWrite: true
          flattenFolders: true
      - task: CopyFiles@2
        displayName: Copy bundle files to staging
        inputs:
          SourceFolder: $(build.sourcesdirectory)/android/app/build/outputs
          Contents: bundle/**/*.aab
          TargetFolder: $(build.artifactstagingdirectory)/bundle
          OverWrite: true
          flattenFolders: true
      - task: CopyFiles@2
        displayName: Copy mapping files to staging
        inputs:
          SourceFolder: $(build.sourcesdirectory)/android/app/build/outputs
          Contents: mapping/**/mapping.txt
          TargetFolder: $(build.artifactstagingdirectory)/mapping
          OverWrite: true
          flattenFolders: true
      - task: PublishBuildArtifacts@1
        displayName: Publish build
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/build
          ArtifactName: build
      - task: PublishBuildArtifacts@1
        displayName: Publish bundle
        continueOnError: true
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/bundle
          ArtifactName: bundle
      - task: PublishBuildArtifacts@1
        displayName: Publish mapping
        condition: >-
          and(succeeded(),
          startsWith(variables['appcenter_android_postprocess_output.mapping'],
          true))
        continueOnError: true
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/mapping
          ArtifactName: mapping
      - task: Bash@3
        displayName: 'Extract versionName from build.gradle'
        inputs:
          targetType: 'inline'
          script: |
            # Busca la línea con versionName
            LINE=$(grep "versionName" $(Build.SourcesDirectory)/android/app/build.gradle)
            echo "Line found: [$LINE]"
            VERSION_NAME=$(echo "$LINE" | sed 's/^[[:space:]]*versionName[[:space:]]*"\([^"]*\)".*/\1/' | tr -d '\n')
            if [ -z "$VERSION_NAME" ]; then
              echo "Error: versionName was not found in build.gradle"
              exit 1
            fi
            echo "Value extracted in square brackets: [$VERSION_NAME]"
            echo "${VERSION_NAME}" > $(Build.ArtifactStagingDirectory)/version_name.txt
            echo "File contents: [$(cat $(Build.ArtifactStagingDirectory)/version_name.txt)]"
          failOnStderr: false
      - task: Bash@3
        displayName: 'Set appVersionName from file'
        inputs:
          targetType: 'inline'
          script: |
            VERSION_NAME=$(cat $(Build.ArtifactStagingDirectory)/version_name.txt)
            echo "Value read from the file: [$VERSION_NAME]"
            echo "##vso[task.setvariable variable=appVersionName;isOutput=false]${VERSION_NAME}"
            echo "Value assigned to appVersionName: [$appVersionName]"
      - task: GooglePlayRelease@4
        displayName: 'Publish to Google Play'
        inputs:
          serviceConnection: 'playstore'
          applicationId: 'com.smf.mobile.etendo_app_loader'
          action: 'SingleBundle'
          bundleFile: '$(build.artifactstagingdirectory)/bundle/**/*.aab'
          track: 'beta'
          releaseName: '$(appVersionName)'
          userFraction: '1.0'
          rolloutToUserFraction: false
          updatePriority: '1'
