def updateCommitStatus(repositoryName, status, description, accessToken, gitCommit, buildUrl, contextBuild) {
  sh "./pipelines/utils/build-update.sh ${repositoryName} ${status} \"${description}\" ${accessToken} ${gitCommit} ${buildUrl} \"${contextBuild}\""
}

pipeline {
  options {
    disableConcurrentBuilds()
  }

  environment { // MARK: Environment Variables
    NPM_TOKEN           = credentials('npmjs-access-token')
    EMAIL_ADDRESS       = credentials('email_builds')

    REPO_SSH_URL        = "git@github.com:etendosoftware/etendo_mobile.git"
    REPOSITORY_NAME     = "etendo_mobile"
    OWNER_REPOSITORY    = "etendosoftware"
    GITHUB_URL          = "https://github.com"

    SUCCESS             = "SUCCESS"
    FAILED              = "FAILED"
    UNSTABLE            = "UNSTABLE"

    COMMIT_INPROGRESS_STATUS = "pending"
    COMMIT_SUCCESS_STATUS    = "success"
    COMMIT_FAILED_STATUS     = "failure"

    NODE_VERSION = "20"

    CONTEXT_BUILD = "App Loader Tests"

    ACCESS_TOKEN = credentials('access_token_github')
  }

  agent { // MARK: Agent
    kubernetes {
      inheritFrom 'jenkins-node-app'
      defaultContainer 'jnlp'
      yamlFile 'pipelines/utils/Agent.yaml'
    }
  }

  stages {
    stage('Building Environment') { // MARK: Building Environment
      steps {
        container('compiler') {
          script {
            env.DESCRIPTION = "Starting Build Environment"
            updateCommitStatus(REPOSITORY_NAME, COMMIT_INPROGRESS_STATUS, env.DESCRIPTION, ACCESS_TOKEN, GIT_COMMIT, BUILD_URL, CONTEXT_BUILD)
            echo "--------------- ${env.DESCRIPTION} ---------------"
            try {
              withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                sh "GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone --branch ${GIT_BRANCH} ${REPO_SSH_URL} ${REPOSITORY_NAME}"
              }
              dir(REPOSITORY_NAME) {
                sh "git checkout ${GIT_COMMIT}"
                echo "-------------------------- Getting Commit Information --------------------------"
                def rootDir = pwd()
                def infoCommit = load "${rootDir}/pipelines/utils/infoCommits.groovy"
                env.URL_ORG_GITHUB = "${GITHUB_URL}/${OWNER_REPOSITORY}"
                def commitInfoTemplate = infoCommit.generateCommitInfo(env.URL_ORG_GITHUB, null, REPOSITORY_NAME, true, null)
                env.COMMIT_INFO = "${commitInfoTemplate}"
                echo "${env.COMMIT_INFO}"

                echo "-------------------------- Building Environment --------------------------"
                sh "sudo curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo -E bash -"
                sh "sudo apt-get install -y nodejs"
                sh "sudo npm install -g yarn"
                sh "npm config set registry \"https://registry.npmjs.org/\""
                sh "npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}"
                sh "yarn install"
                echo "-------------------------- Build Succesful --------------------------"
              }
              currentBuild.result = SUCCESS
            } catch (Exception e) {
              env.ERROR_MESSAGE = "Failed Building Environment"
              echo "Exception occurred: " + e.toString()
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = FAILED
              error(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }

    stage('Running Tests') { // MARK: Running Tests
      when {
        expression {
          currentBuild.result == SUCCESS
        }
      }
      steps {
        container('compiler') {
          script {
            env.DESCRIPTION = "Running Tests"
            updateCommitStatus(REPOSITORY_NAME, COMMIT_INPROGRESS_STATUS, env.DESCRIPTION, ACCESS_TOKEN, GIT_COMMIT, BUILD_URL, CONTEXT_BUILD)
            echo "--------------- ${env.DESCRIPTION} ---------------"
            dir(REPOSITORY_NAME) {
              try {
                env.TEST_STATUS = SUCCESS
                echo "-------------------------- Running Tests --------------------------"
                sh "yarn test"
                echo "-------------------------- Tests Succesful --------------------------"
                currentBuild.result = SUCCESS
              } catch (Exception e) {
                env.TEST_STATUS = UNSTABLE
                env.ERROR_MESSAGE = "Failed Tests"
                echo "Exception occurred: " + e.toString()
                echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
                currentBuild.result = UNSTABLE
                unstable(env.ERROR_MESSAGE)
              }
            }
          }
        }
      }
    }

    stage('Run Sonarqube Analysis') { // MARK: Run Sonarqube Analysis
      when {
        expression {
          currentBuild.result == SUCCESS
        }
      }
      environment {
          scannerHome = tool 'etendo-sonar-scanner';
      }
      steps {
        container('compiler') {
          script {
            try {
              env.DESCRIPTION = "Running SonarQube Analysis"
              updateCommitStatus(REPOSITORY_NAME, COMMIT_INPROGRESS_STATUS, env.DESCRIPTION, ACCESS_TOKEN, GIT_COMMIT, BUILD_URL, CONTEXT_BUILD)
              echo "---------------------- ${env.DESCRIPTION} ----------------------"
              dir(REPOSITORY_NAME) {
                withSonarQubeEnv(credentialsId: 'sonar-token-access', installationName: 'SonarQubeServer') {
                  sh """
                    ${scannerHome}/bin/sonar-scanner \
                      -Dsonar.branch.name=${GIT_BRANCH} \
                      -Dsonar.scm.revision=${GIT_COMMIT}
                  """
                }
              }
              echo "-------------------------- SonarQube Analysis Succesful --------------------------"
            } catch (Exception e) {
              env.ERROR_MESSAGE = "Failed SonarQube Analysis"
              echo "Exception occurred: " + e.toString()
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = FAILED
              unstable(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }
    stage('Compare Coverage Results') { // MARK: - Compare Coverage Results
      when {
        expression {
          currentBuild.result == SUCCESS && !(env.GIT_BRANCH == 'main')
        }
      }
      steps {
        script {
          try {
            env.DESCRIPTION = "Comparing Coverage Results"
            updateCommitStatus(REPOSITORY_NAME, COMMIT_INPROGRESS_STATUS, env.DESCRIPTION, ACCESS_TOKEN, GIT_COMMIT, BUILD_URL, CONTEXT_BUILD)
            echo "---------------------- ${env.DESCRIPTION} ----------------------"

            def sonarProjectKey = sh(script: "grep 'sonar.projectKey' ${REPOSITORY_NAME}/sonar-project.properties | cut -d '=' -f2", returnStdout: true).trim()
            env.PROJECT_KEY = sonarProjectKey
            echo "SonarQube Project Key: ${env.PROJECT_KEY}"
            def branchCurrent = URLEncoder.encode(GIT_BRANCH, 'UTF-8')
            def projectUrl = "${SONAR_SERVER}/dashboard?id=${env.PROJECT_KEY}&branch=${branchCurrent}"
            env.PROJECT_URL = "${projectUrl}"
            echo "SonarQube Project URL: ${env.PROJECT_URL}"
            
            def branchCompare = 'main'
            echo "-------------------------- Comparing Coverage with ${branchCompare} Branch --------------------------"

            def rootDir = pwd()
            def sonarUtils = load "${rootDir}/pipelines/utils/sonarUtils.groovy"

            // Only check commit on PR branches
            def checkCommitCurrent = GIT_BRANCH.startsWith('feature/') || GIT_BRANCH.startsWith('hotfix/') || GIT_BRANCH.startsWith('epic/')
            echo "Check commit for current branch (${GIT_BRANCH}): ${checkCommitCurrent}"
            def coverageCurrent = sonarUtils.getCoverageWithRetry(
              GIT_BRANCH,
              checkCommitCurrent,
              env.PROJECT_KEY,
              SONAR_TOKEN,
              SONAR_SERVER,
              GIT_COMMIT
            )
            def coverageOriginBranch = sonarUtils.getCoverageWithRetry(
              branchCompare,
              false,
              env.PROJECT_KEY,
              SONAR_TOKEN,
              SONAR_SERVER,
              null
            )

            echo "Current branch (${env.GIT_BRANCH}) coverage: ${coverageCurrent}%"
            echo "${branchCompare} branch coverage: ${coverageOriginBranch}%"
            if (coverageCurrent < coverageOriginBranch) {
              env.ERROR_MESSAGE = "Coverage (${coverageCurrent}%) is lower than ${branchCompare} branch (${coverageOriginBranch}%)"
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = UNSTABLE
              env.COMPARE_COVERAGE_STATUS = FAILED
              unstable(env.ERROR_MESSAGE)
            } else {
              echo '--------------------------  Coverage is OK --------------------------'
              currentBuild.result = SUCCESS
            }
          } catch (Exception e) {
            env.ERROR_MESSAGE = "Comparing Coverage Results Failed"
            echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
            echo "Exception occurred: " + e.toString()
            currentBuild.result = UNSTABLE
            unstable(env.ERROR_MESSAGE)
          }
        }
      }
    }
  }
    
  post { // MARK: Post Actions
    success {
      script {
        env.DESCRIPTION = "Successful Tests"
        updateCommitStatus(REPOSITORY_NAME, COMMIT_SUCCESS_STATUS, env.DESCRIPTION, ACCESS_TOKEN, GIT_COMMIT, BUILD_URL, CONTEXT_BUILD)
        echo "---------------------- ${env.DESCRIPTION} ----------------------"
      }
    }
    unstable {
      script {
        def mailSubject = ""
        def moreInfo = ""
        def bodyMessageError = ""

        if (env.TEST_STATUS == UNSTABLE) {
            mailSubject = "Failed Tests"
            bodyMessageError = "Failed tests have been detected in the etendo_mobile repository.<br/>"
        } else if (env.COMPARE_COVERAGE_STATUS == FAILED) {
            mailSubject = "Coverage Decreased"
            bodyMessageError = env.ERROR_MESSAGE
            moreInfo = "Check the <a href='${env.PROJECT_URL}'>SonarQube Report</a> for more details about the coverage.<br/>"
        }
        env.EMAIL_SUBJECT = mailSubject
        env.MORE_INFO = moreInfo
        env.BODY_MESSAGE_ERROR = bodyMessageError

        updateCommitStatus(REPOSITORY_NAME, COMMIT_FAILED_STATUS, env.EMAIL_SUBJECT, ACCESS_TOKEN, GIT_COMMIT, BUILD_URL, CONTEXT_BUILD)
        echo "---------------------- ${env.EMAIL_SUBJECT} ----------------------"
      }
      mail to: EMAIL_ADDRESS,
        subject: "⚠️ ${env.EMAIL_SUBJECT} - ${currentBuild.fullDisplayName}",
        mimeType: "text/html",
        body: """
          <html>
            <head>
                <style>
                    body { font-family: 'Arial', sans-serif; }
                    .header { font-size: 16px; font-weight: bold; color: #FFA500; }
                </style>
            </head>
            <body>
              <p>__________________________________________________________</p>

              <h2 class="header">⚠️ ${env.EMAIL_SUBJECT} ⚠️</h2>

              <p><strong>Reasons ⇢ <em>${env.ERROR_MESSAGE}</em></strong></p>

              ${env.COMMIT_INFO}

              <p>
                ${env.MORE_INFO}
                To more information on the failing run, visit <a href='${env.BUILD_URL}'>Jenkins Build</a>
              </p>

              <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
              <p>__________________________________________________________</p>
            </body>
          </html>
        """
    }
    failure {
      script {
        env.DESCRIPTION = "Build Failed"
        updateCommitStatus(REPOSITORY_NAME, COMMIT_FAILED_STATUS, env.DESCRIPTION, ACCESS_TOKEN, GIT_COMMIT, BUILD_URL, CONTEXT_BUILD)
        echo "---------------------- ${env.DESCRIPTION} ----------------------"
      }
      mail to: EMAIL_ADDRESS,
      subject: "🚫 ${env.ERROR_MESSAGE} in ${currentBuild.fullDisplayName} on '${GIT_BRANCH}' branch",
      mimeType: "text/html",
      body:  """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #FF0000; }
              </style>
          </head>
          <body>
            <p>__________________________________________________________</p>

            <h2 class="header">🚫 BUILD FAILED 🚫</h2>

            <p><strong>Reasons ⇢ <em>${env.ERROR_MESSAGE}</em></strong></p>

            ${env.COMMIT_INFO}

            <p>This failure isn't likely to be caused by failing tests.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

            <p class="footer"><em>Best regards,<br>#EtendoBot 🤖</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
  }

}