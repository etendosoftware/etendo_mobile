pipeline {
  options {
    disableConcurrentBuilds()
  }

  environment { // MARK: Environment Variables
    NPM_TOKEN           = credentials('npmjs-access-token')
    EMAIL_ADDRESS       = credentials('email_builds')

    REPO_SSH_URL        = "git@github.com:etendosoftware/etendo_mobile.git"
    REPOSITORY_NAME     = "etendo_mobile"
    OWNER_REPOSITORY    = "etendosoftware"
    GITHUB_URL          = "https://github.com"

    SUCCESS             = "SUCCESS"
    FAILED              = "FAILED"
    UNSTABLE            = "UNSTABLE"

    COMMIT_INPROGRESS_STATUS = "pending"
    COMMIT_SUCCESS_STATUS    = "success"
    COMMIT_FAILED_STATUS     = "failure"

    NODE_VERSION = "20"

    CONTEXT_BUILD = "App Loader Tests"

    ACCESS_TOKEN = credentials('access_token_github')
  }

  agent { // MARK: Agent
    kubernetes {
      inheritFrom 'jenkins-node-app'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
  name: jenkins-node-library
  namespace: jenkins2025
  labels:
    app.kubernetes.io/name: jenkins-node-library
spec:
  volumes:
    - name: rsa-keys
      configMap:
        name: rsa-keys
        defaultMode: 384
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
        type: ''
  containers:
    - name: compiler
      image: etendo/compiler_jenkins:1.0.7
      env:
        - name: JAVA_HOME
          value: /usr/lib/jvm/java-17-openjdk-amd64
      ports:
        - name: ssh
          containerPort: 22
          protocol: TCP
        - name: visualvm
          containerPort: 8000
          protocol: TCP
      resources:
        limits:
          cpu: 3072m
          memory: 4000Mi
        requests:
          cpu: 1048m
          memory: 2000Mi
      volumeMounts:
        - name: rsa-keys
          mountPath: /root/.ssh/
        - name: docker-sock
          mountPath: /var/run/docker.sock
      securityContext:
        readOnlyRootFilesystem: false
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: default
  serviceAccount: default
  securityContext: {}
    """
    }
  }

  stages {
    stage('Building Environment') { // MARK: Building Environment
      steps {
        container('compiler') {
          script {
            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Starting Build\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
            try {
              withCredentials([sshUserPrivateKey(credentialsId: 'my-credentials', keyFileVariable: 'keyfile')]) {
                sh "GIT_SSH_COMMAND=\"ssh -i ${keyfile} -o \"UserKnownHostsFile=/dev/null\" -o \"StrictHostKeyChecking=no\"\" git clone --branch ${GIT_BRANCH} ${REPO_SSH_URL} ${REPOSITORY_NAME}"
              }
              dir(REPOSITORY_NAME) {
                sh "git checkout ${GIT_COMMIT}"
                echo "-------------------------- Getting Commit Information --------------------------"
                def rootDir = pwd()
                def infoCommit = load "${rootDir}/pipelines/utils/infoCommits.groovy"
                env.URL_ORG_GITHUB = "${GITHUB_URL}/${OWNER_REPOSITORY}"
                def commitInfoTemplate = infoCommit.generateCommitInfo(env.URL_ORG_GITHUB, null, REPOSITORY_NAME, true, null)
                env.COMMIT_INFO_TEMPLATE = "${commitInfoTemplate}"
                echo "${env.COMMIT_INFO_TEMPLATE}"

                echo "-------------------------- Building Environment --------------------------"
                sh "sudo curl -sL https://deb.nodesource.com/setup_${NODE_VERSION}.x | sudo -E bash -"
                sh "sudo apt-get install -y nodejs"
                sh "sudo npm install -g yarn"
                sh "npm config set registry \"https://registry.npmjs.org/\""
                sh "npm config set //registry.npmjs.org/:_authToken ${NPM_TOKEN}"
                sh "yarn install"
                echo "-------------------------- Build Succesful --------------------------"
              }
              currentBuild.result = SUCCESS
            } catch (Exception e) {
              env.ERROR_MESSAGE = "Failed Building Environment"
              echo "Exception occurred: " + e.toString()
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = FAILED
              error(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }

    stage('Running Tests') { // MARK: Running Tests
      when {
        expression {
          currentBuild.result == SUCCESS
        }
      }
      steps {
        container('compiler') {
          script {
            sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
            dir(REPOSITORY_NAME) {
              try {
                env.STATUSTEST = "1"
                echo "-------------------------- Running Tests --------------------------"
                sh "yarn test"
                echo "-------------------------- Tests Succesful --------------------------"
                currentBuild.result = SUCCESS
              } catch (Exception e) {
                env.ERROR_MESSAGE = "Failed Tests"
                echo "Exception occurred: " + e.toString()
                echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
                currentBuild.result = UNSTABLE
                unstable(env.ERROR_MESSAGE)
              }
            }
          }
        }
      }
    }

    stage('Run Sonarqube Analysis') { // MARK: Run Sonarqube Analysis
      when {
        expression {
          currentBuild.result == SUCCESS
        }
      }
      environment {
          scannerHome = tool 'etendo-sonar-scanner';
      }
      steps {
        container('compiler') {
          script {
            try {
              sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_INPROGRESS_STATUS} \"Running SonarQube Analysis\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
              echo "-------------------------- Running SonarQube Analysis --------------------------"
              dir(REPOSITORY_NAME) {
                withSonarQubeEnv(credentialsId: 'sonar-token-access', installationName: 'SonarQubeServer') {
                  sh """
                    ${scannerHome}/bin/sonar-scanner \
                      -Dsonar.branch.name=${GIT_BRANCH}
                  """
                }
              }
              echo "-------------------------- SonarQube Analysis Succesful --------------------------"
            } catch (Exception e) {
              env.ERROR_MESSAGE = "Failed SonarQube Analysis"
              echo "Exception occurred: " + e.toString()
              echo "-------------------------- ${env.ERROR_MESSAGE} --------------------------"
              currentBuild.result = FAILED
              unstable(env.ERROR_MESSAGE)
            }
          }
        }
      }
    }
  }
    
  post { // MARK: Post Actions
    success {
      script {
        sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_SUCCESS_STATUS} \"Successful Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
      }
    }
    fixed {
      mail to: EMAIL_ADDRESS,
      subject: "âœ… Errors Fixed on ${currentBuild.fullDisplayName} on ${GIT_BRANCH} branch",
      mimeType: "text/html",
      body: """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">âœ… ERRORS FIXED âœ… âœ…</h2>

            ${env.COMMIT_INFO_TEMPLATE}

            <p>The problems found in the previous run/s have been fixed! ðŸ’ª<br>Check out the output in the following link: ${env.BUILD_URL}</p>

            <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }

    unstable {
      script {
        sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_FAILED_STATUS} \"Failed Tests\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
      }
      mail to: EMAIL_ADDRESS,
      subject: "ðŸš¨ Failed Tests of '${REPOSITORY_NAME}' on '${GIT_BRANCH}' branch",
      mimeType: "text/html",
      body: """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">ðŸš¨ BUILD UNSTABLE ðŸš¨</h2>

            ${env.COMMIT_INFO_TEMPLATE}

            <p>The tests of '${REPOSITORY_NAME}' have failed.<br>Check out the output in the following link: ${env.BUILD_URL}

            <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
    
    failure {
      script {
        sh "./pipelines/utils/build-update.sh ${REPOSITORY_NAME} ${COMMIT_FAILED_STATUS} \"Build Failed\" ${ACCESS_TOKEN} ${GIT_COMMIT} ${BUILD_URL} \"${CONTEXT_BUILD}\""
      }
      mail to: EMAIL_ADDRESS,
      subject: "ðŸš« ${env.ERROR_MESSAGE} in ${currentBuild.fullDisplayName} on '${GIT_BRANCH}' branch",
      mimeType: "text/html",
      body:  """
        <html>
          <head>
              <style>
                  body { font-family: 'Arial', sans-serif; }
                  .header { font-size: 16px; font-weight: bold; color: #333; }
              </style>
          </head>
          <body>
            <p><em>${new Date()}</em></p>
            <p>__________________________________________________________</p>

            <h2 class="header">ðŸš« BUILD FAILED ðŸš«</h2>

            ${env.COMMIT_INFO_TEMPLATE}

            <p>${env.ERROR_MESSAGE}. This failure isn't likely to be caused by failing tests.<br>To more information on the failing run visit: ${env.BUILD_URL}</p>

            <p class="footer"><em>Best regards,<br>#EtendoBot ðŸ¤–</em></p>
            <p>__________________________________________________________</p>
          </body>
        </html>
      """
    }
  }

}